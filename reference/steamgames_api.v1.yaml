openapi: 3.0.0
info:
  title: reviewcenter
  version: '1.0'
  description: Insights on Steam game reviews.
servers:
  - url: 'http://localhost:5000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags:
        - users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '401':
          description: Unauthorized
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '401':
          description: Unauthorized
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - users
    delete:
      summary: Delete user account
      operationId: delete-user
      responses:
        '200':
          description: OK
      description: Delete an existing user.
    put:
      summary: Update user info
      operationId: put-user
      responses:
        '200':
          description: Information updated.
      description: Updates information about an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
  /reviews:
    get:
      summary: All reviews
      tags:
        - reviews
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-v1-reviews
      description: Returns a list of reviews for every game available on Steam.
    parameters: []
  /reviews/id_1:
    get:
      summary: All reviews for a specific game
      tags:
        - reviews
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-api-reviewcenter-v1-reviews-id_1
      description: Shows reviews for the game with id 1.
    parameters: []
  /games/hiddengems:
    parameters: []
    get:
      summary: Hidden gems
      operationId: get-games-hiddengems
      responses:
        '200':
          description: Games are ready!
        '400':
          description: Bad Request
        '404':
          description: Not Found
      description: Returns a list of games with few but highly-positive reviews.
      tags:
        - games
  /reviews/best:
    get:
      summary: Most upvoted reviews
      tags:
        - reviews
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-reviews-best
      description: Returns the most upvoted game reviews.
  /games:
    get:
      summary: Best games
      tags:
        - games
      responses:
        '200':
          description: Games are ready!
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-games
      description: 'Returns a list of all available games on Steam, ordered by score.'
  /games/mostplayed:
    get:
      summary: Most played games
      tags:
        - games
      responses:
        '200':
          description: Games are ready!
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-games-mostplayed
      description: Returns the games with the most number of hours played (user average).
  /games/recommendation:
    get:
      summary: Game recommendation
      tags:
        - games
      responses:
        '200':
          description: Games are ready!
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-games-recommendation
      description: 'Returns a list of games similar to an user''s favorite games (based on genre, category, reviews from other users).'
  /genres:
    get:
      summary: All genres
      tags:
        - genres
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-genres
      description: Returns all game genres/categories by number of games.
  /genres/best:
    get:
      summary: Best genres
      tags:
        - genres
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-genres-best
      description: Returns all game genres/categories based on the score of all of its games.
  /genres/mostreviewed:
    get:
      summary: Most reviewed genre
      tags:
        - genres
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: get-genres-mostreviewed
      description: Returns all game genre/categories ordered by number of total reviews.
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  securitySchemes: {}
tags:
  - name: games
  - name: genres
  - name: reviews
  - name: users
